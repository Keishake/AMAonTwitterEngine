// Generated by CoffeeScript 1.6.3
(function() {
  var QA, QuestionBox, Tweet, TweetBox, readDropbox, showMessage,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    var hashTweetBox, questionBox, socket,
      _this = this;
    if (from === "twitter") {
      $("#questionText").css('background', '#b8f28c').css('color', '#fff').val('質問を受け付けました。');
      $(".textCount").css('visibility', 'hidden');
      setTimeout(function() {
        return location.href = "/";
      }, 2000);
      return;
    }
    readDropbox();
    socket = io.connect("http://" + socketioUrl);
    hashTweetBox = new TweetBox('#hashTweet');
    $.ajax({
      type: "GET",
      url: "/api/answers",
      success: function(data) {
        var a, ansArr, answers, i, q, qa, question, t, tweets, _i, _j, _len, _len1, _results;
        tweets = data.tweets;
        _results = [];
        for (i = _i = 0, _len = tweets.length; _i < _len; i = ++_i) {
          t = tweets[i];
          q = t.question;
          question = new Tweet(q.profile_image_url, q.screen_name, q.text, 1, t.q_id_str, t.a_user_id_str);
          ansArr = t.answers;
          answers = [];
          for (i = _j = 0, _len1 = ansArr.length; _j < _len1; i = ++_j) {
            a = ansArr[i];
            answers[i] = new Tweet(a.profile_image_url, a.screen_name, a.text, 2, t.q_id_str, t.a_user_id_str);
          }
          qa = new QA(t.q_id_str, t.a_user_id_str, question, answers);
          qa.add(false);
          _results.push($(".qaTweet").css('display', 'block').animate({
            opacity: 1
          }, 1000));
        }
        return _results;
      },
      error: function(data, textStatus, errorThrown) {
        return alert("通信に失敗しました。ページを再読み込みしてください。");
      }
    });
    questionBox = new QuestionBox('#questionText', '#questionButton');
    socket.on('tweet', function(data) {
      var json, tweet;
      json = JSON.parse(data.message);
      tweet = new Tweet(json.icon, json.username, json.text, 0, 'nothing', 'nothing');
      return hashTweetBox.add(tweet);
    });
    return socket.on('answer', function(data) {
      var a, ansArr, answers, i, json, q, qa, question, _i, _len;
      json = JSON.parse(data.message);
      q = json.question;
      question = new Tweet(q.profile_image_url, q.screen_name, q.text, 1, json.q_id_str, json.a_user_id_str);
      ansArr = json.answers;
      answers = [];
      for (i = _i = 0, _len = ansArr.length; _i < _len; i = ++_i) {
        a = ansArr[i];
        answers[i] = new Tweet(a.profile_image_url, a.screen_name, a.text, 2, json.q_id_str, json.a_user_id_str);
      }
      qa = new QA(json.q_id_str, json.a_user_id_str, question, answers);
      $(".id" + json.q_id_str + json.a_user_id_str).remove();
      qa.add(true);
      return $(".qaTweet").css('display', 'block').animate({
        opacity: 1
      }, 1000);
    });
  });

  QuestionBox = (function() {
    function QuestionBox(textSelector, buttonSelecotr) {
      var _this = this;
      this.textLength = $(textSelector).val().length;
      $('.textCount').html(maxTweetLength - this.textLength);
      $(textSelector).on('keydown keyup keypress change', function() {
        _this.textLength = $(textSelector).val().length;
        return $('.textCount').html(maxTweetLength - _this.textLength);
      });
      $(buttonSelecotr).on('click', function() {
        var currentVal;
        if (_this.textLength === 0) {
          showMessage(textSelector, '質問を入力してください。', '#ef8f9c', '');
          return;
        }
        if (_this.textLength > maxTweetLength) {
          currentVal = $(textSelector).val();
          showMessage(textSelector, "" + maxTweetLength + "文字以内で入力してください。", '#ef8f9c', currentVal);
          return;
        }
        $(textSelector).css('color', '#ccc');
        return $.ajax({
          type: "POST",
          url: "/tweet",
          data: {
            text: $(textSelector).val()
          },
          success: function(data) {
            if (data.stat !== "success") {
              showMessage(textSelector, '同じ投稿は続けてできません。', '#ef8f9c', '');
              return;
            }
            return showMessage(textSelector, '質問を受け付けました。', '#b8f28c', '');
          },
          error: function(data, textStatus, errorThrown) {
            return $("#questionForm").submit();
          }
        });
      });
      $(textSelector).on('keypress', function(ev) {
        if ((ev.which && ev.which === 13) || (ev.keyCode && ev.keyCode === 13)) {
          return false;
        } else {
          return true;
        }
      });
    }

    return QuestionBox;

  })();

  TweetBox = (function() {
    function TweetBox(selector) {
      this.showMoreTweets = __bind(this.showMoreTweets, this);
      var _this = this;
      this.selector = selector;
      this.tweets = [];
      this.newTweets = 0;
      this.to = '';
      this.from = '';
      this.favicon = new Favico({
        animation: 'slide'
      });
      this.showMoreTweets();
      $("" + this.selector + " .new").on("click", function() {
        return _this.showNewTweets();
      });
      $("" + this.selector + " .more").on("click", function() {
        return _this.showMoreTweets();
      });
    }

    TweetBox.prototype.add = function(tweet) {
      this.tweets.push(tweet);
      $("" + this.selector + " .stream").prepend(tweet.content('newTweet'));
      this.newTweets++;
      this.favicon.badge(this.newTweets);
      $("#hashTweetCount").text(this.newTweets);
      return this.updateNumber();
    };

    TweetBox.prototype.showNewTweets = function() {
      var t, _i, _len, _ref;
      _ref = this.tweets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        if (t.display) {
          continue;
        }
        t.display = true;
      }
      $(".tweet.newTweet").css('display', 'block').animate({
        opacity: 1
      }, 1000);
      this.newTweets = 0;
      this.favicon.badge(0);
      $("#hashTweetCount").text(0);
      return this.updateNumber();
    };

    TweetBox.prototype.showMoreTweets = function() {
      var _this = this;
      $("" + this.selector + " .stream .more").css('display', 'none');
      return $.ajax({
        type: "GET",
        url: "/api/fetch_hash_tweets?from_id=" + this.to,
        success: function(data) {
          var i, str, t, tweet, tweets, _i, _len;
          tweets = data.tweets;
          str = '';
          for (i = _i = 0, _len = tweets.length; _i < _len; i = ++_i) {
            t = tweets[i];
            tweet = new Tweet(t.profile_image_url, t.screen_name, t.text, 0);
            str += tweet.content('moreTweet');
          }
          $("" + _this.selector + " .stream").append(str);
          $(".tweet.moreTweet").css('display', 'block').animate({
            opacity: 1
          }, 1000);
          $("" + _this.selector + " .stream").append('<button class="more">過去のツイートを読み込む</button>');
          $("" + _this.selector + " .more").on("click", function() {
            return _this.showMoreTweets();
          });
          return _this.setIds(data.from_id, data.to_id);
        },
        error: function(data, textStatus, errorThrown) {}
      });
    };

    TweetBox.prototype.updateNumber = function() {
      return $("" + this.selector + " .num").text(this.newTweets);
    };

    TweetBox.prototype.setIds = function(from, to) {
      this.from = from;
      return this.to = to;
    };

    return TweetBox;

  })();

  QA = (function() {
    function QA(qId, aUserId, question, answers) {
      this.qId = qId;
      this.aUserId = aUserId;
      this.question = question;
      this.answers = answers;
    }

    QA.prototype.add = function(prepend) {
      var a, count, counter, i, id, mCount, newCount, newMCount, plus, str, _i, _len, _ref;
      str = '';
      str += this.question.content('qaTweet');
      _ref = this.answers;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        a = _ref[i];
        str += a.content('qaTweet');
      }
      if (this.aUserId === candidates[0]) {
        id = '#uTweet';
        counter = '#uCount';
      } else if (this.aUserId === candidates[1]) {
        id = '#mTweet';
        counter = '#mCount';
      } else if (this.aUserId === candidates[2]) {
        id = '#iTweet';
        counter = '#iCount';
      } else if (this.aUserId === candidates[3]) {
        id = '#hTweet';
        counter = '#hCount';
      }
      str += "<div class='qaTweet' style='height: 2px; background: #04afe6; display: none; opacity: 0;'></div>";
      if (prepend) {
        $("" + id + " .qa").prepend(str);
        $("#mobile .qa").prepend(str);
        plus = 1;
      } else {
        $("" + id + " .qa").append(str);
        $("#mobile .qa").append(str);
        plus = this.answers.length;
      }
      count = parseInt($(counter).text());
      newCount = count + plus;
      $(counter).text(newCount);
      mCount = parseInt($('#mobileCount').text());
      newMCount = mCount + plus;
      return $('#mobileCount').text(newMCount);
    };

    return QA;

  })();

  Tweet = (function() {
    function Tweet(icon, username, text, qa, id, id2) {
      this.qa = qa;
      this.id = id;
      this.id2 = id2;
      if (qa === 0) {
        this.icon = "<a class='twIcon' href='https://twitter.com/" + username + "' target='_blank'><img src='" + icon + "' /></a>";
        this.username = "<a class='twUsername' href='https://twitter.com/" + username + "' target='_blank'>@" + username + "</a>";
        this.text = "<span class='twText'>" + text.replace(/(http:\/\/[\x21-\x7e]+)/gi, "<a href='$1' target='_blank'>$1</a>").replace(/\@([a-z0-9\_]+)(\.)?/gi, "<a href='https://twitter.com/$1' target='_blank'>@$1</a>").replace(/\#([ｦ-ﾟー゛゜々ヾヽぁ-ヶ一-龠ａ-ｚＡ-Ｚ０-９a-zA-Z0-9_]+)(\.)?/gi, "<a href='https://twitter.com/#$1' target='_blank'>#$1</a>") + "</span>";
        this.display = false;
        return;
      }
      this.icon = "<a class='icon' href='https://twitter.com/" + username + "' target='_blank'><img src='" + icon + "' /></a>";
      this.username = "<div class='name'><a href='https://twitter.com/" + username + "' target='_blank'>@" + username + "</a></div>";
      this.text = "<p>" + text.replace(/(http:\/\/[\x21-\x7e]+)/gi, "<a href='$1' target='_blank'>$1</a>").replace(/\@([a-z0-9\_]+)(\.)?/gi, "<a href='https://twitter.com/$1' target='_blank'>@$1</a>").replace(/\#([ｦ-ﾟー゛゜々ヾヽぁ-ヶ一-龠ａ-ｚＡ-Ｚ０-９a-zA-Z0-9_]+)(\.)?/gi, "<a href='https://twitter.com/#$1' target='_blank'>#$1</a>") + "</p>";
      this.display = false;
    }

    Tweet.prototype.content = function(type) {
      if (this.qa === 0) {
        return "<li class='tweet " + type + "' style='opacity: 0; display: none;'>" + this.icon + " " + this.username + ": " + this.text + "</li>";
      }
      if (this.qa === 1) {
        return "<li class='q " + type + " id" + this.id + this.id2 + "' style='opacity: 0; display: none;'><div class='user'><i class='q'>Q</i>" + this.icon + " " + this.username + "</div><div class='description'>" + this.text + "</div></li>";
      }
      if (this.qa === 2) {
        return "<li class='a " + type + " id" + this.id + this.id2 + "' style='opacity: 0; display: none;'><div class='user'><i class='a'>A</i>" + this.icon + " " + this.username + "</div><div class='description'>" + this.text + "</div></li>";
      }
    };

    return Tweet;

  })();

  showMessage = function(selector, firstText, color, secondText) {
    var originalCountColor, originalTextColor;
    $("questionButton").attr('disabled', 'disabled');
    originalTextColor = $(selector).css('color');
    originalCountColor = $(".textCount").css('color');
    $(selector).css('background', color).css('color', '#fff').val(firstText).attr('disabled', 'disabled');
    $(".textCount").css('color', '#fff');
    return setTimeout(function() {
      $(selector).css('background', '#fff').css('color', originalTextColor).val(secondText).removeAttr('disabled');
      $("questionButton").removeAttr('disabled');
      return $(".textCount").css('color', originalCountColor);
    }, 2000);
  };

  readDropbox = function() {
    $.ajax({
      type: "GET",
      url: "https://dl.dropboxusercontent.com/u/7963766/asktokyo/candidate.txt",
      success: function(text) {
        return $('#candidateList').text(text);
      },
      error: function(data, textStatus, errorThrown) {}
    });
    return $.ajax({
      type: "GET",
      url: "https://dl.dropboxusercontent.com/u/7963766/asktokyo/fixcandidate.txt",
      success: function(text) {
        return $('#fixCandidateList').text(text);
      },
      error: function(data, textStatus, errorThrown) {}
    });
  };

}).call(this);
